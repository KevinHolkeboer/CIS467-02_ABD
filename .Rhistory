census <- na.omit(census)
ef <- census
a <- min(census$ZIP_Pop_Density[census$ZIP_Pop_Density>0])-.0001
g <- min(census$ZIP_P_Black[census$ZIP_P_Black>0])-.0001
h <- min(census$ZIP_P_Asian[census$ZIP_P_Asian>0])-.0001
i <- min(census$ZIP_P_Hispanic[census$ZIP_P_Hispanic>0])-.0001
census %>%
mutate(
pd.log = log(ifelse(ZIP_Pop_Density==0,a,ZIP_Pop_Density)),
pBl.log = log(ifelse(ZIP_P_Black==0,g,ZIP_P_Black)),
pAn.log = log(ifelse(ZIP_P_Asian==0,h,ZIP_P_Asian)),
pHL.log = log(ifelse(ZIP_P_Hispanic==0,i,ZIP_P_Hispanic))
) -> census
sccensus <- scale(census)
sccensus <- census %>%
dplyr::select(2:3, 7:10) %>%
scale()
set.seed(4323)
sccensus %>%
dist() %>%
hclust() -> census.hclust
fviz_dend(census.hclust, k = 16, rect = TRUE, rect_fill = TRUE, lwd = 0.5, cex = 0.5) # pop_dens, med_age, %s, med_inc
R16 <- ef %>%
mutate(cluster = cutree(census.hclust,16))
# Get product from customer
itemkey <- "83914"
# Get customers that sell the specific product
Customer_Product <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer-Product")
soldItem <- subset(Customer_Product, ItemKey == itemkey)
# Narrow down to only top 10% of customers.
soldItem <- soldItem[order(soldItem$NetRevenue),]
top10Percent = ceiling(nrow(soldItem) * 0.10)
topSellers <- head(soldItem, top10Percent)
cusList <- topSellers[['CusKey']]
# Get zip of customers.
customers <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer")
i = 1
zipList <- character()
for(ID in cusList) {
temp <- subset(customers, CusKey == cusList[i])
zipList <- c(zipList, as.character(temp[1, "ShipZip"]))
i = i + 1
}
# Determine which cluster theze zips belong to.
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
BestZIP <- getMode(zipList)
BestZIPCluster <- subset(R16, ClstZIP == BestZIP)
BestCluster <- as.character(BestZIPCluster[1, "cluster"])
# Get zips from this cluster.
similarZones <- subset(R16, cluster == BestCluster)
similarZips <- similarZones[['ClstZIP']]
# Get customers in these zips.
i = 1
similarCust <- vector()
for(zips in similarZips) {
temp <- subset(customers, ShipZip == similarZips[i])
similarCust <- c(similarCust, temp["CusKey"])
i = i + 1
}
similarCust <- unlist(similarCust, recursive = FALSE)
similarCust <- unname(similarCust)
similarCust <- unique(similarCust)
# Remove customers that already sell the product.
newCustomers <- vector()
for (ID in similarCust) {
temp <- subset(Customer_Product, CusKey == ID & ItemKey == itemkey)
if (nrow(temp) == 0) {
newCustomers <- c(newCustomers, ID)
}
}
# Build the final data frame.
isFirst = TRUE
for (ID in newCustomers) {
if (isFirst) {
oldPrediction  <- subset(customers, CusKey == ID)
isFirst = FALSE
}
else {
temp <- subset(customers, CusKey == ID)
oldPrediction <- rbind(oldPrediction, temp)
}
}
# Order data frame by net revenue.
oldPrediction <- oldPrediction[order(-oldPrediction$NetRevenue),]
View(oldPrediction)
library(ape)        # Hierarchical clustering
library(dplyr)      # Data manipulation
library(pvclust)    # Compute cluster p-values
library(Rtsne)      # Clustering mixed data
library(tidyverse)  # Data manipulation
library(openxlsx)   # Write excel files
census <- readxl::read_xlsx("combined_data.xlsx", sheet = "Census")
census$ZIP_Pop_Density <- as.numeric(census$ZIP_Pop_Density)
census$ZIP_med_income <- as.numeric(census$ZIP_med_income)
census$ZIP_med_age <- as.numeric(census$ZIP_med_age)
census$ZIP_P_Black <- as.numeric(census$ZIP_P_Black)
census$ZIP_P_Asian <- as.numeric(census$ZIP_P_Asian)
census$ZIP_P_Hispanic <- as.numeric(census$ZIP_P_Hispanic)
census <- na.omit(census)
ef <- census
a <- min(census$ZIP_Pop_Density[census$ZIP_Pop_Density>0])-.0001
g <- min(census$ZIP_P_Black[census$ZIP_P_Black>0])-.0001
h <- min(census$ZIP_P_Asian[census$ZIP_P_Asian>0])-.0001
i <- min(census$ZIP_P_Hispanic[census$ZIP_P_Hispanic>0])-.0001
census %>%
mutate(
pd.log = log(ifelse(ZIP_Pop_Density==0,a,ZIP_Pop_Density)),
pBl.log = log(ifelse(ZIP_P_Black==0,g,ZIP_P_Black)),
pAn.log = log(ifelse(ZIP_P_Asian==0,h,ZIP_P_Asian)),
pHL.log = log(ifelse(ZIP_P_Hispanic==0,i,ZIP_P_Hispanic))
) -> census
sccensus <- scale(census)
sccensus <- census %>%
dplyr::select(2:3, 7:10) %>%
scale()
set.seed(4323)
sccensus %>%
dist() %>%
hclust() -> census.hclust
fviz_dend(census.hclust, k = 16, rect = TRUE, rect_fill = TRUE, lwd = 0.5, cex = 0.5) # pop_dens, med_age, %s, med_inc
R16 <- ef %>%
mutate(cluster = cutree(census.hclust,16))
# Get product from customer
itemkey <- "83914"
# Get customers that sell the specific product
Customer_Product <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer-Product")
soldItem <- subset(Customer_Product, ItemKey == itemkey)
# Narrow down to only top 10% of customers.
soldItem <- soldItem[order(soldItem$NetRevenue),]
top10Percent = ceiling(nrow(soldItem) * 0.10)
topSellers <- head(soldItem, top10Percent)
cusList <- topSellers[['CusKey']]
# Get zip of customers.
customers <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer")
i = 1
zipList <- character()
for(ID in cusList) {
temp <- subset(customers, CusKey == cusList[i])
zipList <- c(zipList, as.character(temp[1, "ShipZip"]))
i = i + 1
}
# Determine which cluster theze zips belong to.
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
BestZIP <- getMode(zipList)
BestZIPCluster <- subset(R16, ClstZIP == BestZIP)
BestCluster <- as.character(BestZIPCluster[1, "cluster"])
# Get zips from this cluster.
similarZones <- subset(R16, cluster == BestCluster)
similarZips <- similarZones[['ClstZIP']]
# Get customers in these zips.
i = 1
similarCust <- vector()
for(zips in similarZips) {
temp <- subset(customers, ShipZip == similarZips[i])
similarCust <- c(similarCust, temp["CusKey"])
i = i + 1
}
similarCust <- unlist(similarCust, recursive = FALSE)
similarCust <- unname(similarCust)
similarCust <- unique(similarCust)
# Remove customers that already sell the product.
newCustomers <- vector()
for (ID in similarCust) {
temp <- subset(Customer_Product, CusKey == ID & ItemKey == itemkey)
if (nrow(temp) == 0) {
newCustomers <- c(newCustomers, ID)
}
}
# Build the final data frame.
isFirst = TRUE
for (ID in newCustomers) {
if (isFirst) {
oldPrediction  <- subset(customers, CusKey == ID)
isFirst = FALSE
}
else {
temp <- subset(customers, CusKey == ID)
oldPrediction <- rbind(oldPrediction, temp)
}
}
# Order data frame by net revenue.
oldPrediction <- oldPrediction[order(-oldPrediction$NetRevenue),]
View(oldPrediction)
library(ape)        # Hierarchical clustering
library(dplyr)      # Data manipulation
library(tidyverse)  # Data manipulation
library(openxlsx)   # Write excel files
census <- readxl::read_xlsx("combined_data.xlsx", sheet = "Census")
census$ZIP_Pop_Density <- as.numeric(census$ZIP_Pop_Density)
census$ZIP_med_income <- as.numeric(census$ZIP_med_income)
census$ZIP_med_age <- as.numeric(census$ZIP_med_age)
census$ZIP_P_Black <- as.numeric(census$ZIP_P_Black)
census$ZIP_P_Asian <- as.numeric(census$ZIP_P_Asian)
census$ZIP_P_Hispanic <- as.numeric(census$ZIP_P_Hispanic)
census <- na.omit(census)
ef <- census
a <- min(census$ZIP_Pop_Density[census$ZIP_Pop_Density>0])-.0001
g <- min(census$ZIP_P_Black[census$ZIP_P_Black>0])-.0001
h <- min(census$ZIP_P_Asian[census$ZIP_P_Asian>0])-.0001
i <- min(census$ZIP_P_Hispanic[census$ZIP_P_Hispanic>0])-.0001
census %>%
mutate(
pd.log = log(ifelse(ZIP_Pop_Density==0,a,ZIP_Pop_Density)),
pBl.log = log(ifelse(ZIP_P_Black==0,g,ZIP_P_Black)),
pAn.log = log(ifelse(ZIP_P_Asian==0,h,ZIP_P_Asian)),
pHL.log = log(ifelse(ZIP_P_Hispanic==0,i,ZIP_P_Hispanic))
) -> census
sccensus <- scale(census)
sccensus <- census %>%
dplyr::select(2:3, 7:10) %>%
scale()
set.seed(4323)
sccensus %>%
dist() %>%
hclust() -> census.hclust
fviz_dend(census.hclust, k = 16, rect = TRUE, rect_fill = TRUE, lwd = 0.5, cex = 0.5) # pop_dens, med_age, %s, med_inc
R16 <- ef %>%
mutate(cluster = cutree(census.hclust,16))
# Get product from customer
itemkey <- "83914"
# Get customers that sell the specific product
Customer_Product <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer-Product")
soldItem <- subset(Customer_Product, ItemKey == itemkey)
# Narrow down to only top 10% of customers.
soldItem <- soldItem[order(soldItem$NetRevenue),]
top10Percent = ceiling(nrow(soldItem) * 0.10)
topSellers <- head(soldItem, top10Percent)
cusList <- topSellers[['CusKey']]
# Get zip of customers.
customers <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer")
i = 1
zipList <- character()
for(ID in cusList) {
temp <- subset(customers, CusKey == cusList[i])
zipList <- c(zipList, as.character(temp[1, "ShipZip"]))
i = i + 1
}
# Determine which cluster theze zips belong to.
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
BestZIP <- getMode(zipList)
BestZIPCluster <- subset(R16, ClstZIP == BestZIP)
BestCluster <- as.character(BestZIPCluster[1, "cluster"])
# Get zips from this cluster.
similarZones <- subset(R16, cluster == BestCluster)
similarZips <- similarZones[['ClstZIP']]
# Get customers in these zips.
i = 1
similarCust <- vector()
for(zips in similarZips) {
temp <- subset(customers, ShipZip == similarZips[i])
similarCust <- c(similarCust, temp["CusKey"])
i = i + 1
}
similarCust <- unlist(similarCust, recursive = FALSE)
similarCust <- unname(similarCust)
similarCust <- unique(similarCust)
# Remove customers that already sell the product.
newCustomers <- vector()
for (ID in similarCust) {
temp <- subset(Customer_Product, CusKey == ID & ItemKey == itemkey)
if (nrow(temp) == 0) {
newCustomers <- c(newCustomers, ID)
}
}
# Build the final data frame.
isFirst = TRUE
for (ID in newCustomers) {
if (isFirst) {
oldPrediction  <- subset(customers, CusKey == ID)
isFirst = FALSE
}
else {
temp <- subset(customers, CusKey == ID)
oldPrediction <- rbind(oldPrediction, temp)
}
}
# Order data frame by net revenue.
oldPrediction <- oldPrediction[order(-oldPrediction$NetRevenue),]
View(oldPrediction)
library(ape)        # Hierarchical clustering
library(openxlsx)   # Write excel files
census <- readxl::read_xlsx("combined_data.xlsx", sheet = "Census")
census$ZIP_Pop_Density <- as.numeric(census$ZIP_Pop_Density)
census$ZIP_med_income <- as.numeric(census$ZIP_med_income)
census$ZIP_med_age <- as.numeric(census$ZIP_med_age)
census$ZIP_P_Black <- as.numeric(census$ZIP_P_Black)
census$ZIP_P_Asian <- as.numeric(census$ZIP_P_Asian)
census$ZIP_P_Hispanic <- as.numeric(census$ZIP_P_Hispanic)
census <- na.omit(census)
ef <- census
a <- min(census$ZIP_Pop_Density[census$ZIP_Pop_Density>0])-.0001
g <- min(census$ZIP_P_Black[census$ZIP_P_Black>0])-.0001
h <- min(census$ZIP_P_Asian[census$ZIP_P_Asian>0])-.0001
i <- min(census$ZIP_P_Hispanic[census$ZIP_P_Hispanic>0])-.0001
census %>%
mutate(
pd.log = log(ifelse(ZIP_Pop_Density==0,a,ZIP_Pop_Density)),
pBl.log = log(ifelse(ZIP_P_Black==0,g,ZIP_P_Black)),
pAn.log = log(ifelse(ZIP_P_Asian==0,h,ZIP_P_Asian)),
pHL.log = log(ifelse(ZIP_P_Hispanic==0,i,ZIP_P_Hispanic))
) -> census
sccensus <- scale(census)
sccensus <- census %>%
dplyr::select(2:3, 7:10) %>%
scale()
set.seed(4323)
sccensus %>%
dist() %>%
hclust() -> census.hclust
fviz_dend(census.hclust, k = 16, rect = TRUE, rect_fill = TRUE, lwd = 0.5, cex = 0.5) # pop_dens, med_age, %s, med_inc
R16 <- ef %>%
mutate(cluster = cutree(census.hclust,16))
# Get product from customer
itemkey <- "83914"
# Get customers that sell the specific product
Customer_Product <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer-Product")
soldItem <- subset(Customer_Product, ItemKey == itemkey)
# Narrow down to only top 10% of customers.
soldItem <- soldItem[order(soldItem$NetRevenue),]
top10Percent = ceiling(nrow(soldItem) * 0.10)
topSellers <- head(soldItem, top10Percent)
cusList <- topSellers[['CusKey']]
# Get zip of customers.
customers <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer")
i = 1
zipList <- character()
for(ID in cusList) {
temp <- subset(customers, CusKey == cusList[i])
zipList <- c(zipList, as.character(temp[1, "ShipZip"]))
i = i + 1
}
# Determine which cluster theze zips belong to.
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
BestZIP <- getMode(zipList)
BestZIPCluster <- subset(R16, ClstZIP == BestZIP)
BestCluster <- as.character(BestZIPCluster[1, "cluster"])
# Get zips from this cluster.
similarZones <- subset(R16, cluster == BestCluster)
similarZips <- similarZones[['ClstZIP']]
# Get customers in these zips.
i = 1
similarCust <- vector()
for(zips in similarZips) {
temp <- subset(customers, ShipZip == similarZips[i])
similarCust <- c(similarCust, temp["CusKey"])
i = i + 1
}
similarCust <- unlist(similarCust, recursive = FALSE)
similarCust <- unname(similarCust)
similarCust <- unique(similarCust)
# Remove customers that already sell the product.
newCustomers <- vector()
for (ID in similarCust) {
temp <- subset(Customer_Product, CusKey == ID & ItemKey == itemkey)
if (nrow(temp) == 0) {
newCustomers <- c(newCustomers, ID)
}
}
# Build the final data frame.
isFirst = TRUE
for (ID in newCustomers) {
if (isFirst) {
oldPrediction  <- subset(customers, CusKey == ID)
isFirst = FALSE
}
else {
temp <- subset(customers, CusKey == ID)
oldPrediction <- rbind(oldPrediction, temp)
}
}
# Order data frame by net revenue.
oldPrediction <- oldPrediction[order(-oldPrediction$NetRevenue),]
detach("package:clustertend", unload = TRUE)
library(clustertend)
update.packages(..., checkBuilt=TRUE)
update.packages(checkBuilt = T, ask = F)
# Install Libraries.
library(ape)        # Hierarchical clustering
library(cluster)    # Clustering algorithms
library(clustertend)# Assess cluster tendency
library(clv)        # Evaluate stability of clustering solution
library(clValid)    # Evaluate stability of clustering solution
library(dbscan)     # Clustering algorithms
library(dendextend) # Modify graphs
library(dplyr)      # Data manipulation
library(factoextra) # Clustering algorithms & visualization
library(fpc)        # Evaluate stability of clustering solution
library(ggplot2)    # Create graphs
library(gridExtra)  # Multiple cluster plots in grid
library(mvtnorm)    # For other packages
library(mvoutlier)  # Identify multivariate outliers
library(NbClust)    # Determine number of clusters
library(outliers)   # Test for univariate outliers
library(psych)      # Descriptive statistics
library(pvclust)    # Compute cluster p-values
library(readxl)     # Read in excel files
library(Rtsne)      # Clustering mixed data
library(tidyverse)  # Data manipulation
library(openxlsx)   # Write excel files
# Get Census data and update to numeric values.
census <- readxl::read_xlsx("combined_data.xlsx", sheet = "Census")
census$ZIP_Pop_Density <- as.numeric(census$ZIP_Pop_Density)
census$ZIP_med_income <- as.numeric(census$ZIP_med_income)
census$ZIP_med_age <- as.numeric(census$ZIP_med_age)
census$ZIP_P_Black <- as.numeric(census$ZIP_P_Black)
census$ZIP_P_Asian <- as.numeric(census$ZIP_P_Asian)
census$ZIP_P_Hispanic <- as.numeric(census$ZIP_P_Hispanic)
census <- na.omit(census)
ef <- census
# Transform data.
a <- min(census$ZIP_Pop_Density[census$ZIP_Pop_Density>0])-.0001
g <- min(census$ZIP_P_Black[census$ZIP_P_Black>0])-.0001
h <- min(census$ZIP_P_Asian[census$ZIP_P_Asian>0])-.0001
i <- min(census$ZIP_P_Hispanic[census$ZIP_P_Hispanic>0])-.0001
census %>%
mutate(
pd.log = log(ifelse(ZIP_Pop_Density==0,a,ZIP_Pop_Density)),
pBl.log = log(ifelse(ZIP_P_Black==0,g,ZIP_P_Black)),
pAn.log = log(ifelse(ZIP_P_Asian==0,h,ZIP_P_Asian)),
pHL.log = log(ifelse(ZIP_P_Hispanic==0,i,ZIP_P_Hispanic))
) -> census
# Normalize data.
sccensus <- scale(census)
# Hierarchical clustering.
sccensus <- census %>%
dplyr::select(2:3, 7:10) %>%
scale()
set.seed(4323)
sccensus %>%
dist() %>%
hclust() -> census.hclust
fviz_dend(census.hclust, k = 16, rect = TRUE, rect_fill = TRUE, lwd = 0.5, cex = 0.5) # pop_dens, med_age, %s, med_inc
# Hierarchical cuts.
R16 <- ef %>%
mutate(cluster = cutree(census.hclust,16))
# To be replaced with user input.
itemkey <- "83914"
# Get customers that sell the specific product
Customer_Product <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer-Product")
soldItem <- subset(Customer_Product, ItemKey == itemkey)
# Narrow down to only top 10% of customers.
soldItem <- soldItem[order(soldItem$NetRevenue),]
top10Percent = ceiling(nrow(soldItem) * 0.10)
topSellers <- head(soldItem, top10Percent)
cusList <- topSellers[['CusKey']]
# Get zip of customers.
customers <- readxl::read_xlsx("combined_data.xlsx", sheet = "Customer")
i = 1
zipList <- character()
for(ID in cusList) {
temp <- subset(customers, CusKey == cusList[i])
zipList <- c(zipList, as.character(temp[1, "ShipZip"]))
i = i + 1
}
# Determine which cluster theze zips belong to.
getMode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
BestZIP <- getMode(zipList)
BestZIPCluster <- subset(R16, ClstZIP == BestZIP)
BestCluster <- as.character(BestZIPCluster[1, "cluster"])
# Get zips from this cluster.
similarZones <- subset(R16, cluster == BestCluster)
similarZips <- similarZones[['ClstZIP']]
# Get customers in these zips.
i = 1
similarCust <- vector()
for(zips in similarZips) {
temp <- subset(customers, ShipZip == similarZips[i])
similarCust <- c(similarCust, temp["CusKey"])
i = i + 1
}
similarCust <- unlist(similarCust, recursive = FALSE)
similarCust <- unname(similarCust)
similarCust <- unique(similarCust)
# Remove customers that already sell the product.
newCustomers <- vector()
for (ID in similarCust) {
temp <- subset(Customer_Product, CusKey == ID & ItemKey == itemkey)
if (nrow(temp) == 0) {
newCustomers <- c(newCustomers, ID)
}
}
# Build the final data frame.
isFirst = TRUE
for (ID in newCustomers) {
if (isFirst) {
oldPrediction  <- subset(customers, CusKey == ID)
isFirst = FALSE
}
else {
temp <- subset(customers, CusKey == ID)
oldPrediction <- rbind(oldPrediction, temp)
}
}
# Order data frame by net revenue.
oldPrediction <- oldPrediction[order(-oldPrediction$NetRevenue),]
View(oldPrediction)
View(oldPrediction)
